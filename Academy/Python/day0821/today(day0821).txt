파이썬 설치 위치
C:\Users\soldesk\AppData\Local\Programs\Python\Python313

모듈 위치
C:\Users\soldesk\AppData\Local\Programs\Python\Python313\Lib

- day0820 中
5. module(모듈)

- import 모듈이름 (예) import os
    모듈만 import 했기 때문에 함수 사용할때 모듈.함수명 이렇게 사용해야함
- import 모듈이름 as 별칭 (예) import pandas as pd
    별칭을 붙이는 순간 별칭으로 접근
- from 모듈이름 import 모듈함수 (예) from os import listdir … 모듈이름을 앞에 붙이지 않고도 사용
    함수를 import했기 때문에 해당함수를 바로 사용 가능
- from 모듈이름 import * (예) from mod1 import *
    해당 모듈의 있는 것들을 전부 사용할 수 있음


서드 파티 모듈 (파이썬이 아닌 외부에서 공유하는 모듈)
- 다운받아야 사용가능함
    pip i 모듈명


-----


1. 모듈만들기
1) lib가 아닌 위치에있으면 같은 위치에서만 사용가능
2) py파일로 만들어야함

2. 클래스
1) 생성
    class 클래스명(상속받을 객체) :
    - 상속받을 객체는 생략 가능 () 포함
    - Python특성상 함수 등의 선언시, {}를 안쓰기 때문에 들여쓰기로 구분

2) 속성값 선언(__init__함수)
    def__init__(self, 속성1, 속성2...)
        self.속성1=속성1
        ...
    - Python의 class에서 메소드 선언시 해당 객체를 가리키는 매개변수인 self를 선언
    - __init__은 처음 생성시 자동으로 동작하는 메소드(일종의 생성자 같은 느낌)

3) _ 쓰임
    - 변수로서 _는 특별한 용도가 없을 때, 즉 사용되지 않는 변수를 나타낼때 사용
    - __는 예약 함수나, 변수에 사용

4) 객체 생성
    - 객체를 생성할때는 self 속성은 따로 작성할 필요없다.
    - 메소드 호출은 자바와 동일하게 인스턴스.메소드(매개변수)로 호출한다.

5) __str__ 함수
    - 인스턴스명으로 호출하면, __str__이 실행되어 주소값을 출력함
    - 오버라이딩하여 해당 객체의 정보를 출력하게 작성.(자바의 toString 같은 역할인 듯)


3. 클래스의 다형성
1) 상속받은 메소드를 오버라이딩하여 같은 이름이지만 다른 기능을 하도록 하는 것
2) 추상메서드는 raise NotImplementedError() 또는 pass를 통해 구현을 안하면 에러가 나게끔 한다.
3) Python에서는 다중상속을 허용함.
   상속간 동일한 이름의 메소드가 충돌하는 경우, 처음 상속받은 클래스를 기준으로 적용됨


4. 클래스의 기시성
1) '__변수명' 을 통해 클래스 내부에서만 접근할 수 있도록 제한.(자바의 private 같은 역할인 듯)
2) @property를 작성한 함수를 통해 '__변수명'에 접근하게 할수 있음.
    - 다른 변수에 해당함수를 통해 접근. 함수지만 ()처리 없이 변수처럼 접근 가능
    - @변수명.setter,@변수명.getter 를 사용해 satter,getter메소드를 작성 및 사용 가능
      근데 @property가 사실상 getter 역할을 해서 getter은 잘 쓰이지 않음.


5. 패키지 생성
1) 폴더에 .py 파일을 생성 및 작성
2) __init__.py 파일 생성 및 작성
    패키지를 import 할때 기본적으로 제공할 것들
        실습에서는 from .add import add 같이
        from .py파일명 import .py파일명 으로 작성 했는데 맞나?
3) 외부에 실행용 .py 파일 생성
4) import 하여 해당 패키지를 사용
    cf. from calculator import add,subtract

6. 예외처리
1) try : 예외가 발생할 수 있는 코드 (자바랑 동일)
2) except : 예외가 발생했을 때, 수행하는 코드 (자바의 catch)
        as 를 붙여 별칭을 짓고, 해당 에러를 사용하기도 한다.
3) else : 예외가 발생하지 않았을 때, 수행하는 코드
    자바에서는 보통 그런 코드를 try에 넣어서인지 없었던 것 같은데. 
4) finally : 예외 발생여부와 상관없이, 무조건 수행하는 코드 (자바랑 동일)
5) 'except ZeroDivisionError :' 처럼, 특정 Error를 지정할 수도 있고,
    'except Exception :' 이나 'except :' 처럼 모든 Error를 상정할 수 있음.
6) 순서는 try-except-else-finally 순서로 작성되어야함.
    else를 except 앞에 써보려 했는데, 에러가 나드라..
7) raise : 필요할때 예외를 발생 (throw와 비슷한듯)
    처리가 불가능할 때, 고의적으로 에러를 발생
8) assert : 조건에 맞지 않으면 AssertionError를 발생
    디버깅 체크용


7. 파일
1) 바이너리 파일(이진법 형식)과 텍스트 파일(문자열 형식)로 나뉨
    여기서는 텍스트 파일을 기준으로 작성
2) open('파일명','파일 열기 모드') : 텍스트 파일을 다룰때 사용
    파일 열기 모드 : r(읽기), w(덮어쓰기), a(이어쓰기)

모드	의미	파일 없으면?	쓰기 시 기존 내용	읽기 가능	쓰기 가능	포인터 위치
r+	  읽기/쓰기	  ❌ 에러	   기존 내용 유지	    ✅	     ✅	     파일 처음
w+ 	  읽기/쓰기	  ✅ 생성	   기존 내용 삭제	    ✅	     ✅	     파일 처음
a+	  읽기/쓰기	  ✅ 생성	 기존 내용 유지,추가     ✅	      ✅	   파일 끝(쓰기 시)

3) read() : 파일을 통째로 하나로 반환
4) close() : 파일 닫기
5) with : open 앞에 붙여서 쓰면 자동으로 close() 처리
    코드는 들여쓰기로 구분
    as 를 사용해 별칭을 적용해서 사용
6) readlines() : 파일을 한줄씩('\n' 기준) 리스트로 반환
7) readline() : 파일을 한줄만 읽어서 문자열로 반환

cf. repleace(앞,뒤,(횟수)) : 앞의 문자를 뒤의 것으로 변경 (횟수는 옵션사항)


8. 디렉터리
1) 생성
    - os를 import
    - os.mkdir('디렉터리명')
        이미 존재하는 디렉터리명이면 생성할 수 없으므로 if문을 통해 미리 확인
        cf. if not os.path.isdir('디렉터리명'):




----------
1️⃣ 모듈 / 패키지
구분	설명	                비고
모듈	.py 파일	            같은 디렉터리면 바로 import 가능
패키지	폴더 + __init__.py	    패키지 내부 모듈 import 가능 (from .module import func)
import	외부 파일 사용	         from package import module 등

2️⃣ 클래스
구분	    설명	               자바 비교
생성	__init__(self, ...)	        생성자
self	인스턴스 자신 참조	            this
_변수	비공개 관습	            private과 유사하지만 실제 제한 없음
__변수	이름 맹글링, 접근 제한	        private
__str__	인스턴스 문자열 표현	      toString()
다중 상속	    가능	                불가
3️⃣ 속성 접근 (Property)
구분	                사용법	            특징
getter	            @property	    함수지만 () 없이 변수처럼 접근
setter	            @변수.setter	값을 설정할 때 사용
getter decorator	@변수.getter	거의 사용 안 함, property가 기본 getter
4️⃣ 예외 처리
구분	                설명	                자바 비교
try	                예외 발생 가능 코드	            try
except	            예외 처리	                  catch
else	            예외 없을 때 수행	            없음
finally	            항상 수행	                  finally
raise	            강제로 예외 발생	            throw
assert	        조건 체크, 실패 시 AssertionError	assert
5️⃣ 파일 모드
모드	의미	파일 없으면?	쓰기 시 기존 내용	읽기 가능	쓰기 가능	포인터 위치
r+	  읽기/쓰기	  ❌ 에러	   기존 내용 유지	    ✅	     ✅	     파일 처음
w+ 	  읽기/쓰기	  ✅ 생성	   기존 내용 삭제	    ✅	     ✅	     파일 처음
a+	  읽기/쓰기	  ✅ 생성	 기존 내용 유지,추가     ✅	      ✅	   파일 끝(쓰기 시)
6️⃣ 파일 읽기/쓰기
메서드	                    설명
read()	            전체 내용을 문자열로 반환
readline()	        한 줄씩 읽기, 문자열 반환
readlines()	        전체 줄을 리스트로 반환
write()	            파일에 문자열 쓰기
seek(0)	            파일 포인터를 처음으로 이동
7️⃣ 디렉터리
메서드	                    설명
os.mkdir()	        디렉터리 생성
os.path.isdir()	    디렉터리 존재 여부 확인
os.path.exists()	파일/폴더 존재 여부 확인