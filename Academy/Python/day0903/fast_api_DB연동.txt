#pip install sqlalchemy pymysql

[database.py]

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base

# MySQL 연결 정보
DATABASE_URL = "mysql+pymysql://pytest:pytest@localhost:3306/memo_app"

engine = create_engine(DATABASE_URL, echo=True)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()



[models.py]

from sqlalchemy import Column, Integer, String, Text
from database import Base

class Note(Base):
    __tablename__ = "notes"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=False)
    content = Column(Text, nullable=False)


[schemas.py]

from pydantic import BaseModel

class NoteBase(BaseModel):
    title: str
    content: str

class NoteCreate(NoteBase):
    pass

class NoteUpdate(NoteBase):
    pass

class NoteOut(NoteBase):
    id: int

    class Config:
        orm_mode = True



[app.py]


from fastapi import FastAPI, Depends, HTTPException, Request, Form
from fastapi.responses import RedirectResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from database import SessionLocal, engine, Base
import models
import os


#테이블 생성
Base.metadata.create_all(bind=engine)

app = FastAPI()
#템플릿 지정
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
templates = Jinja2Templates(directory=os.path.join(BASE_DIR, "templates"))

----------------------------------------------------------------------------------------------------


# DB 세션 의존성
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


#  메모 목록
@app.get("/", response_class=HTMLResponse)
def read_notes(request: Request, db: Session = Depends(get_db)):
    notes = db.query(models.Note).all()
    return templates.TemplateResponse("memo/index.html", {"request": request, "notes": notes})

# 새 메모 작성 폼
@app.get("/notes/new", response_class=HTMLResponse)
def new_note_form(request: Request):
    return templates.TemplateResponse("/memo/form.html", {"request": request})


#  메모 상세보기
@app.get("/notes/{note_id}", response_class=HTMLResponse)
def read_note(request: Request, note_id: int, db: Session = Depends(get_db)):
    note = db.query(models.Note).filter(models.Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")
    return templates.TemplateResponse("memo/detail.html", {"request": request, "note": note})




# 메모 생성 처리
@app.post("/notes/", response_class=HTMLResponse)
def create_note(
    title: str = Form(...),
    content: str = Form(...),
    db: Session = Depends(get_db)
):
    db_note = models.Note(title=title, content=content)
    db.add(db_note)
    db.commit()
    return RedirectResponse("/", status_code=303)


# 메모 수정 폼
@app.get("/notes/{note_id}/edit", response_class=HTMLResponse)
def edit_note_form(request: Request, note_id: int, db: Session = Depends(get_db)):
    note = db.query(models.Note).filter(models.Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")
    return templates.TemplateResponse("memo/edit.html", {"request": request, "note": note})


#  메모 수정 처리
@app.post("/notes/{note_id}/edit")
def update_note(
    note_id: int,
    title: str = Form(...),
    content: str = Form(...),
    db: Session = Depends(get_db)
):
    note = db.query(models.Note).filter(models.Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")

    note.title = title
    note.content = content
    db.commit()
    return RedirectResponse(f"/notes/{note_id}", status_code=303)


# 메모 삭제 처리
@app.post("/notes/{note_id}/delete")
def delete_note(note_id: int, db: Session = Depends(get_db)):
    note = db.query(models.Note).filter(models.Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")

    db.delete(note)
    db.commit()
    return RedirectResponse("/", status_code=303)


--------------------templates/memo ----------------------
[index.html]


<!DOCTYPE html>
<html lang="ko">
<head><meta charset="UTF-8"><title>메모 목록</title></head>
<body>
    <h1>메모 목록</h1>
    <a href="/notes/new">새 메모 작성</a>
    <ul>
        {% for note in notes %}
            <li>
                <a href="/notes/{{ note.id }}">{{ note.title }}</a>
            </li>
        {% else %}
            <li>작성된 메모가 없습니다.</li>
        {% endfor %}
    </ul>
</body>
</html>


[form.html]

<!DOCTYPE html>
<html lang="ko">
<head><meta charset="UTF-8"><title>새 메모 작성</title></head>
<body>
    <h1>새 메모 작성</h1>
    <form action="/notes/" method="post">
        <label>제목: <input type="text" name="title" required></label><br>
        <label>내용:<br>
            <textarea name="content" rows="5" cols="40" required></textarea>
        </label><br>
        <button type="submit">저장</button>
    </form>
</body>   
</html>


[detail.html]

<!DOCTYPE html>
<html lang="ko">
<head><meta charset="UTF-8"><title>{{ note.title }}</title></head>
<body>
    <h1>{{ note.title }}</h1>
    <p>{{ note.content }}</p>
    <a href="/">목록으로</a> | 
    <a href="/notes/{{ note.id }}/edit">수정</a>
    <form action="/notes/{{ note.id }}/delete" method="post" style="display:inline;">
        <button type="submit">삭제</button>
    </form>
</body>
</html>


[edit.html]

<!DOCTYPE html>
<html lang="ko">
<head><meta charset="UTF-8"><title>메모 수정</title></head>
<body>
    <h1>메모 수정</h1>
    <form action="/notes/{{ note.id }}/edit" method="post">
        <label>제목: <input type="text" name="title" value="{{ note.title }}" required></label><br>
        <label>내용:<br>
            <textarea name="content" rows="5" cols="40" required>{{ note.content }}</textarea>
        </label><br>
        <button type="submit">수정</button>
    </form>
    <a href="/notes/{{ note.id }}">취소</a>
</body>
</html>


[실행]
uvicorn app:app --reload