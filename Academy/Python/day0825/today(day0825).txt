1. csv 파일로 데이터 다루기
-csv : ,와 개행으로 구분되는 문자열 배열(txt 파일)

0) 파일 위치 및 파일리스트, 경로
- 모듈을 가상환경에 파일을 작성하지 않고, 외부파일에서 진행하다보니,
파일위치에 대한 에러가 많이 발생, 아래 참고
cf. 
- os.listdir() : 해당 폴더에 파일 리스트 반환
- os.getcwd() : 현재 경로의 위치 반환
- os.chdir() : 해당 경로로 경로 변환
- module이 들어간 파일은 '__init__.py' 파일이 있어야 패키지로 인식하고 읽을 수 있음.

1) 서울시 외국인 비율
- 서울시에서 제공하는 공공데이터를 csv 다운 및 파일 수정
- 해당 파일에서 전체인구수 대비 외국인 인구수를 계산하여 출력
(cf. day0825>csv>서울시_외국인_비율.ipynb,  day0825>module>usecsv.py)

2) 아파트 검색
- 국토교통부에서 제공하는 실거래가 공개 시스템에서 제공하는 csv 다운 및 파일 수정
- 해당 파일에서 조건에 맞는 아파트 내역을 출력
(cf. day0825>csv>서울시_외국인_비율.ipynb,  day0825>module>usecsv.py)


2. numpy
- python에서 list는 한번에 여러값의 수정이 불가(슬라이스 불가)
cf. score[1][0:2]=0  => TypeError
- 슬라이스를 통한 값의 수정,계산 그리고 배열간의 수학적인 계산을 효율적으로 하기 위해 사용
- 문자열 배열, boolean 배열, 객체배열(==list) 모두 가능하나, 수학적인 계산에는 부적합


3. numpy function
1) arary([val1,val2...] : val1, val2... 값을 가진 1차원 배열생성
cf. 
arr=np.array(['apple','banana','cherry'])

2) 배열.dtype : 해당 배열의 data type 반환
cf. 
print(arr.dtype)
   -> <U6    # <U6 : 최대 길이 6의 유니코드 문자열

3) 배열.shape : 해당 배열의 data 행과 열을 튜플로 반환
cf. 
print(arr, arr.dtype)
   ->(3,)

4) astype('type값') : type값으로 type 변경
cf. 
d= np.array([1,2,3,4])

print(d.dtype)
   ->int64

d=d.astype('float64') # 그냥 float만 써도 되긴하네
print(d, d.dtype)
   ->float64

5) arange(n1,n2) : n1부터 n2-1까지 값이 있는 1차원 배열 생성
cf.
d=np.arange(1,5)
   ->[1 2 3 4]

6) zeros((n1,n2)) : 모든 값이 0인 [n1,n2] 짜리 배열 생성
cf.
d1=np.zeros((2,5))
   ->[[0. 0. 0. 0. 0.]
       [0. 0. 0. 0. 0.]]

7) ones((n1,n2)) : 모든 값이 1인 [n1,n2] 짜리 배열 생성
cf.
d2=np.ones((3,4))
   ->[[1. 1. 1. 1.]
       [1. 1. 1. 1.]
       [1. 1. 1. 1.]]

8) random.randn(n1,n2) : 정규분포( 중앙값 0, 표준편차 n1)에서 난수 n2개를 뽑아 배열생성
cf.
d4= np.random.randn(1,5)
   ->[[ 1.09068234 -0.23068582 -0.72158703 -0.67378846 -1.26653709]]   #난수이기 때문에 값이 매번 달라짐

9) transpose() : 전치행렬 반환(행과 열을 교체)
cf.
a=np.ones((2,3))
   ->[[1. 1. 1.]
       [1. 1. 1.]]

b=np.transpose(a)
   ->[[1. 1.]
       [1. 1.]
       [1. 1.]]

10) all(조건,axis=1) : 해당 조건에 맞는 행을 T/F로 반환, axis=1 행, axis=0 열
cf.
arr=[[1. 2. 1. 2. 2.],[1. 3. 2. 3. 2.]]
d=np.all((arr>=0) & (arr<3), axis=1)  # arr에서 행을 기준으로 값이 조건문에 해당하는 지 확인
   ->[ True False]

q_d=quest[d]   # 해당 조건에 맞는 행만으로 행렬을 구성
   -> [[1. 2. 1. 2. 2.]]

11) sum(배열) : 모든 요소의 합 반환
- axis를 이용하여 행, 열간의 합을 구하는 것도 가능
cf.
arr = np.array([[1, 2, 3],
                [4, 5, 6]])

np.sum(arr, axis=0)
   ->21

np.sum(arr, axis=0)  # 열 합
   ->[5 7 9]

np.sum(arr, axis=1)  # 행 합
   ->[ 6 15]

12) mean(배열) : 모든 요소의 평균 반환
- axis를 이용하여 행, 열간의 합을 구하는 것도 가능
cf.
arr = np.array([[1, 2, 3],
                [4, 5, 6]])

np.mean(arr)          # 전체 평균
   ->3.5

np.mean(arr, axis=0)    # 열 평균
   ->[2.5 3.5 4.5]

np.mean(arr, axis=1)    # 행 평균
   ->[2. 5.]


4. numpy 사칙연산
1) 같은위치에 있는 값끼리 사칙연산이 진행된다.
cf.
arr1=np.array([[2,3,4],[6,7,8]])
arr2=np.array([[12,23,34],[36,47,58]])

arr1+arr2
   ->[[14 26 38]
       [42 54 66]]
arr1*arr2
   ->[[ 24  69 136]
      [216 329 464]]
arr1/arr2
   ->[[0.16666667 0.13043478 0.11764706]
       [0.16666667 0.14893617 0.13793103]]
arr1-arr2
   ->[[-10 -20 -30]
       [-30 -40 -50]]

2) 행렬의 크기가 다를 경우 (행또는 열의 크기가 같을 때,)
- 행 또는 열의 크기가 같아야함.
같은 것을 기준으로 모두 계산됨
cf.
arr1=np.array([[2,3,4],[6,7,8]])
arr3= np.array([100,200,300])

arr1+arr3
   ->[[102 203 304]
       [106 207 308]]
arr3+arr1
   ->[[102 203 304]
       [106 207 308]]

3) 행렬의 크기가 다를 경우 (행,열의 크기가 모두 다를 때,)
- ValueError 발생
cf.
arr1=np.array([[2,3,4],[6,7,8]])
arr4=np.array([100,200,300,400,500])
arr1+arr4
   ->ValueError 발생



-----gpt-----


1️⃣ CSV 파일 다루기

os 모듈로 경로와 파일 확인

os.listdir() → 파일 리스트

os.getcwd() → 현재 경로

os.chdir() → 경로 변경

module 폴더에 있는 Python 파일을 import하려면 __init__.py 파일이 있어야 
해당 폴더가 패키지로 인식되어 import 가능

실습 예시

서울시 외국인 비율 계산

아파트 실거래가 검색

2️⃣ NumPy 기본

리스트와 달리 슬라이스 가능, 벡터 연산 가능

문자열, boolean, 객체 배열 가능

수학 계산에는 수치 배열 사용

3️⃣ NumPy 주요 함수
함수	설명	예시
np.array([…])	배열 생성	arr = np.array([1,2,3])
dtype	데이터 타입 확인	arr.dtype
shape	배열 차원 확인	arr.shape
astype(type)	타입 변경	arr.astype('float64')
arange(n1,n2)	범위 배열	np.arange(1,5)
zeros((n1,n2))	0으로 채운 배열	np.zeros((2,5))
ones((n1,n2))	1로 채운 배열	np.ones((3,4))
random.randn(n1,n2)	정규분포 난수	np.random.randn(1,5)
transpose()	전치행렬	np.transpose(a)
all(condition, axis)	조건 만족 여부	np.all((arr>=0)&(arr<3), axis=1)
sum(arr, axis)	합계	np.sum(arr, axis=0)
mean(arr, axis)	평균	np.mean(arr, axis=1)
4️⃣ NumPy 연산

같은 위치끼리 사칙연산 가능

브로드캐스팅 가능 (행 또는 열 크기 맞춰야 함)

크기 다르면 ValueError 발생

💡 TIP

조건 필터링: mask = np.all((arr>=0)&(arr<6), axis=1) → arr[mask]

슬라이싱: arr[0:3, 0] → 1차원, arr[0:3, 0:1] → 2차원

표준편차: np.std(arr, axis=0) → 열 기준, axis=1 → 행 기준