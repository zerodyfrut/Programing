실시간 검색 필터 만들기

과제 목표
미리 정의된 데이터 목록과 검색창(input)을 만듭니다. 사용자가 검색창에 글자를 입력할 때마다, 
해당 글자가 포함된 항목만 목록에 실시간으로 필터링되어 보이도록 구현합니다.

핵심 요구사항
1. 컴포넌트 내에 과일 이름 배열을 초기 데이터로 가집니다.

2. 사용자가 텍스트를 입력할 input 창이 있어야 합니다.

3. input에 값이 입력될 때마다, 전체 과일 목록에서 해당 텍스트를 포함하는 과일만을 찾아 아래에 보여줘야 합니다.

4. 검색은 대소문자를 구분하지 않아야 합니다. (예: 'ap' 입력 시 'Apple', 'Grape' 모두 찾아야 함)


구현 단계
1.초기 상태 설정 (useState):
사용자의 검색어를 저장할 상태 (searchTerm)를 useState로 만드세요. 초기값은 빈 문자열 '' 입니다.
필터링할 원본 데이터는 일반 배열 변수로 가지고 있어도 충분합니다. (상태로 만들 필요 없음)

2. UI 렌더링:

검색어를 입력받을 <input> 태그를 만드세요.
원본 데이터 배열을 .map()으로 렌더링하여 전체 목록을 우선 화면에 표시하세요.

3. 필터링 로직 구현:

렌더링 부분(.map() 사용 전)에서 원본 데이터 배열에 .filter() 메소드를 적용하세요.
filter의 조건으로, 각 과일 이름(fruit)을 소문자로 바꾸고(toLowerCase()), 현재 검색어 상태(searchTerm)의 소문자 버전을 포함(includes())하는지 확인하세요.
이 필터링된 결과를 map으로 렌더링하면 됩니다.

4.이벤트 핸들러 연결 (onChange):

<input> 태그에 onChange 이벤트를 연결하세요.
이벤트가 발생할 때마다 setSearchTerm 함수를 호출하여 input의 현재 값(event.target.value)으로 검색어 상태를 업데이트하세요. 
상태가 변하면 React가 자동으로 리렌더링하며 필터링 로직이 다시 실행됩니다.


[SearchFilter.jsx]

import { useState } from 'react';

// 컴포넌트 외부에 데이터를 두어 리렌더링 시 다시 생성되지 않도록 합니다.
const fruits = ['Apple', 'Banana', 'Cherry', Fig', 'Grape', 'Lemon', 'Orange'];

export default function SearchFilter() {
  // 사용자의 입력값을 저장하기 위한 state
  ******state 선언     

  // 검색어(searchTerm)가 바뀔 때마다 이 컴포넌트는 리렌더링됩니다.
  // 렌더링될 때마다 필터링 로직이 새로 실행됩니다.
  const filteredFruits = *****입력값으로 필터링(대소문자 구별 X   ap 검색시 'Apple', 'Grape' 둘 다 출력  )       


  return (
    <div>
      <h2>과일 검색 필터</h2>

      <input
        type="text"
        placeholder="검색어를 입력하세요..."
        // input의 값이 변할 때마다 searchTerm state를 업데이트합니다.
   *****이벤트 처리        
        // input의 값을 현재 state와 일치시킵니다.
        ***state 값 출력
      />

      <hr />


      {filteredFruits.length > 0 ? (
        // 필터링된 결과가 1개 이상 있을 경우, 목록을 렌더링합니다.
        <ul>
           *******결과물 출력 *****
        </ul>
      ) : (
        // 필터링된 결과가 없을 경우, 메시지를 렌더링합니다.
        <p>검색 결과가 없습니다.</p>
      )}
    </div>
  );
}




