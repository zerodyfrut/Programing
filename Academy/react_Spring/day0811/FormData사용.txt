회원가입 웹 어플리케이션

-개발환경 
DB: mysql
back-end:  spring boot, spring data jpa
front-end: react, axois	

회원 추가
- 회원정보는 id_no, id, name, image, phone, address, role를 저장
- id_no: 일련번호
- image: static/img 폴더에 저장하고 DB에는 이미지 경로만 저장
- address는daum 우편번호 서비스(https://postcode.map.daum.net/guide) 를 사용(프론트)



[application.properties]

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

[WebConfig.java]

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
   @Override
   public void addCorsMappings(CorsRegistry registry) {
       registry.addMapping("/**")
               .allowedOrigins("http://localhost:5173", "http://localhost:3000")
               .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
               .allowedHeaders("*");
   }
}

[Member.java]

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Entity
@Table(name = "member")
public class Member {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idNo;

    private String id;
    private String name;
    private String image; // 이미지 경로
    private String phone;
    private String address;
    private String role;

}



[MemberRepository.java]

import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberRepository extends JpaRepository<Member, Long> {
}




[Controller.java]

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/members")
@RequiredArgsConstructor
public class MemberController {

    @Autowired
    MemberRepository memberRepository;
//multipart/form-data 형식의 요청만 처리하도록 제한
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Member> saveMember(
            @RequestParam String id, // 안되면@RequestParam("id") String id
            @RequestParam String name,
            @RequestParam MultipartFile image,
            @RequestParam String phone,
            @RequestParam String address,
            @RequestParam String role
    ) throws IOException {
        
        String uploadDir = new ClassPathResource("static/img").getFile().getAbsolutePath();
        String fileName = UUID.randomUUID() + "_" + image.getOriginalFilename();
        Path filePath = Paths.get(uploadDir, fileName);
        Files.write(filePath, image.getBytes());

        Member member = new Member();
        member.setId(id);
        member.setName(name);
        member.setImage("/img/" + fileName);
        member.setPhone(phone);
        member.setAddress(address);
        member.setRole(role);

        Member saved = memberRepository.save(member);
        return ResponseEntity.ok(saved);
    }
}
-------------------------------------------------------------------------

cmd> npm install axios


[MemberForm.jsx]

import React, { useState } from "react";
import axios from "axios";

export default function MemberForm() {
  const [form, setForm] = useState({
    id: "",
    name: "",
    phone: "",
    address: "",
    role: "USER"
  });
  const [image, setImage] = useState(null);

  const handleAddressSearch = () => {
    new window.daum.Postcode({
      oncomplete: function(data) {
        setForm({ ...form, address: data.address });
      }
    }).open();
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); //이벤트(submit 취소)
    //FomData : 파일 업로드 또는 여러 폼 데이터를 multipart / form data 형태로 서버에 보낼때
    const formData = new FormData();
    for (let key in form) {
      formData.append(key, form[key]);
    }
    formData.append("image", image);

    await axios.post("http://localhost:8080/api/members", formData, {
      headers: { "Content-Type": "multipart/form-data" }
    // 
    });
    alert("회원가입 완료!");
  };

  return (
    <form onSubmit={handleSubmit}>
      <input placeholder="ID" onChange={e => setForm({...form, id: e.target.value})} />
      <input placeholder="이름" onChange={e => setForm({...form, name: e.target.value})} />
      <input type="file" onChange={e => setImage(e.target.files[0])} accept="image/*"/>
      <input placeholder="전화번호" onChange={e => setForm({...form, phone: e.target.value})} />
      <input value={form.address} placeholder="주소" readOnly />
      <button type="button" onClick={handleAddressSearch}>주소 검색</button>
      <select
        name="role"
        value={form.role}
        onChange={e => setForm({...form, role: e.target.value})}
        style={{ marginRight: '0.5rem' }}
      >
        <option value="USER">USER</option>
        <option value="ADMIN">ADMIN</option>
      </select>
      <button type="submit">회원가입</button>
    </form>
  );
}


-----
react-router-dom 인스톨 후
서버 - get 방식 요청받아 모든 레코드를 리턴하는 getAllMembers() 선언
클라이언트 -> "/" 요청시 MemberForm 출력
	      "/members" 요청시 MemberList 출력

MemberList
-> 처음 렌더링 시
axios.get() 으로 모든 레코드를 받아와서 state에 저장
저장된 데이터 출력(이미지 포함)

삭제버튼 클릭시 레코드 삭제
